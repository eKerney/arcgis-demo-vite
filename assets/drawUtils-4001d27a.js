import{e4 as b,cO as w,e5 as A,e6 as G}from"./index-4e7cdbf0.js";function O(n,e,a,o){if(o==null||n.hasZ||(o=void 0),n.type==="point")return n.x+=e,n.y+=a,n.hasZ&&o!=null&&(n.z+=o),n;if(n.type==="multipoint"){const x=n.points;for(let i=0;i<x.length;i++)x[i]=B(x[i],e,a,o);return n}if(n.type==="extent")return n.xmin+=e,n.xmax+=e,n.ymin+=a,n.ymax+=a,o!=null&&(n.zmin??(n.zmin=0),n.zmin+=o,n.zmax??(n.zmax=0),n.zmax+=o),n;const m=b(n),t=n.type==="polyline"?n.paths:n.rings;for(let x=0;x<m.length;x++){const i=m[x];for(let s=0;s<i.length;s++)i[s]=B(i[s],e,a,o)}return"paths"in n?n.paths=t:n.rings=t,n}function I(n,e,a,o,m){const t=n.clone(),x=o.resolution;if(t.type==="point"){if(m)O(t,e*x,-a*x);else{const i=o.state.transform,s=o.state.inverseTransform,l=i[0]*t.x+i[2]*t.y+i[4],y=i[1]*t.x+i[3]*t.y+i[5];t.x=s[0]*(l+e)+s[2]*(y+a)+s[4],t.y=s[1]*(l+e)+s[3]*(y+a)+s[5]}return t}if(t.type==="multipoint"){if(m)O(t,e*x,-a*x);else{const i=t.points,s=o.state.transform,l=o.state.inverseTransform;for(let y=0;y<i.length;y++){const c=i[y],p=s[0]*c[0]+s[2]*c[1]+s[4],M=s[1]*c[0]+s[3]*c[1]+s[5],f=l[0]*(p+e)+l[2]*(M+a)+l[4],u=l[1]*(p+e)+l[3]*(M+a)+l[5];i[y]=q(c,f,u,void 0)}}return t}if(t.type==="extent"){if(m)O(t,e*x,-a*x);else{const i=o.state.transform,s=o.state.inverseTransform,l=i[0]*t.xmin+i[2]*t.ymin+i[4],y=i[1]*t.xmin+i[3]*t.ymin+i[5],c=i[0]*t.xmax+i[2]*t.ymax+i[4],p=i[1]*t.xmax+i[3]*t.ymax+i[5];t.xmin=s[0]*(l+e)+s[2]*(y+a)+s[4],t.ymin=s[1]*(l+e)+s[3]*(y+a)+s[5],t.xmax=s[0]*(c+e)+s[2]*(p+a)+s[4],t.ymax=s[1]*(c+e)+s[3]*(p+a)+s[5]}return t}if(m)O(t,e*x,-a*x);else{const i=b(t),s=t.type==="polyline"?t.paths:t.rings,l=o.state.transform,y=o.state.inverseTransform;for(let c=0;c<i.length;c++){const p=i[c];for(let M=0;M<p.length;M++){const f=p[M],u=l[0]*f[0]+l[2]*f[1]+l[4],h=l[1]*f[0]+l[3]*f[1]+l[5],v=y[0]*(u+e)+y[2]*(h+a)+y[4],g=y[1]*(u+e)+y[3]*(h+a)+y[5];p[M]=q(f,v,g,void 0)}}"paths"in t?t.paths=s:t.rings=s}return t}function J(n,e,a,o){if(n.type==="point"){const{x:f,y:u}=n,h=o?o[0]:f,v=o?o[1]:u,g=n.clone(),d=(f-h)*e+h,r=(u-v)*a+v;return g.x=d,g.y=r,g}if(n.type==="multipoint"){const f=b(n),u=w(),[h,v,g,d]=A(u,[f]),r=o?o[0]:(h+g)/2,z=o?o[1]:(d+v)/2,T=n.clone(),j=T.points;for(let Z=0;Z<j.length;Z++){const k=j[Z],[C,D]=k,E=(C-r)*e+r,F=(D-z)*a+z;j[Z]=q(k,E,F,void 0)}return T}if(n.type==="extent"){const{xmin:f,xmax:u,ymin:h,ymax:v}=n,g=o?o[0]:(f+u)/2,d=o?o[1]:(v+h)/2,r=n.clone();if(r.xmin=(f-g)*e+g,r.ymax=(v-d)*a+d,r.xmax=(u-g)*e+g,r.ymin=(h-d)*a+d,r.xmin>r.xmax){const z=r.xmin,T=r.xmax;r.xmin=T,r.xmax=z}if(r.ymin>r.ymax){const z=r.ymin,T=r.ymax;r.ymin=T,r.ymax=z}return r}const m=b(n),t=w(),[x,i,s,l]=A(t,m),y=o?o[0]:(x+s)/2,c=o?o[1]:(l+i)/2,p=n.clone(),M=p.type==="polyline"?p.paths:p.rings;for(let f=0;f<m.length;f++){const u=m[f];for(let h=0;h<u.length;h++){const v=u[h],[g,d]=v,r=(g-y)*e+y,z=(d-c)*a+c;M[f][h]=q(v,r,z,void 0)}}return"paths"in p?p.paths=M:p.rings=M,p}function K(n,e,a,o,m,t){const x=Math.sqrt((a-n)*(a-n)+(o-e)*(o-e));return Math.sqrt((m-n)*(m-n)+(t-e)*(t-e))/x}function L(n,e,a,o=!1){const m=Math.atan2(e.y-a.y,e.x-a.x)-Math.atan2(n.y-a.y,n.x-a.x),t=Math.atan2(Math.sin(m),Math.cos(m));return o?t:G(t)}function B(n,e,a,o){return q(n,n[0]+e,n[1]+a,n[2]!=null&&o!=null?n[2]+o:void 0)}function q(n,e,a,o){const m=[e,a];return n.length>2&&m.push(o??n[2]),n.length>3&&m.push(n[3]),m}export{K as a,I as i,L as m,O as r,J as s};
