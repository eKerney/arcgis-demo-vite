import{fS as w,g5 as $,fU as I,ap as O,aq as T,ar as E,as as M,fT as R,g6 as P,g7 as j,cb as F,aw as L,g8 as b,cf as g,g9 as N,ax as f,bP as q,ga as J,g2 as U,gb as k,av as v,b9 as A,ai as i,aj as n,gc as x,aC as _,cl as V,aE as z,al as C,aF as B,gd as D}from"./index-71d9419a.js";import{E as G,f as H,Y as K}from"./SublayersOwner-11672e93.js";import{m as W}from"./ExportImageParameters-e0ec30b4.js";import{t as Y}from"./imageBitmapUtils-9714b06d.js";import{e as S}from"./sublayerUtils-412521b0.js";import"./QueryTask-6d5a3a2a.js";import"./executeForIds-2af2f9be.js";import"./query-cc9f5d54.js";import"./normalizeUtils-12909a13.js";import"./normalizeUtilsCommon-2bf8a83b.js";import"./pbfQueryUtils-43ab8bb6.js";import"./pbf-d00ed0d0.js";import"./executeQueryJSON-a63eebfb.js";import"./executeQueryPBF-c7db58c2.js";import"./floorFilterUtils-080a7cd2.js";let a=class extends w($(I(G(H(O(T(E(M(R(P(j(F(B))))))))))))){constructor(...e){super(...e),this.dateFieldsTimeReference=null,this.datesInUnknownTimezone=!1,this.dpi=96,this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.preferredTimeReference=null,this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null}normalizeCtorArgs(e,s){return typeof e=="string"?{url:e,...s}:e}load(e){const s=e!=null?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch(L).then(()=>this._fetchService(s))),Promise.resolve(this)}readImageFormat(e,s){const l=s.supportedImageFormatTypes;return l&&l.includes("PNG32")?"png32":"png24"}writeSublayers(e,s,l,t){var h;if(!this.loaded||!e)return;const o=e.slice().reverse().flatten(({sublayers:r})=>r&&r.toArray().reverse()).toArray();let p=!1;if(this.capabilities&&this.capabilities.operations.supportsExportMap&&((h=this.capabilities.exportMap)!=null&&h.supportsDynamicLayers)){const r=b(t.origin);if(r===g.PORTAL_ITEM){const c=this.createSublayersForOrigin("service").sublayers;p=S(o,c,g.SERVICE)}else if(r>g.PORTAL_ITEM){const c=this.createSublayersForOrigin("portal-item");p=S(o,c.sublayers,b(c.origin))}}const m=[],d={writeSublayerStructure:p,...t};let y=p;o.forEach(r=>{const c=r.write({},d);m.push(c),y=y||r.originOf("visible")==="user"}),m.some(r=>Object.keys(r).length>1)&&(s.layers=m),y&&(s.visibleLayers=o.filter(r=>r.visible).map(r=>r.id))}createExportImageParameters(e,s,l,t){const o=t&&t.pixelRatio||1;e&&this.version>=10&&(e=e.clone().shiftCentralMeridian());const p=new W({layer:this,floors:t==null?void 0:t.floors,scale:N({extent:e,width:s})*o}),m=p.toJSON();p.destroy();const d=!t||!t.rotation||this.version<10.3?{}:{rotation:-t.rotation},y=e&&e.spatialReference,h=y.wkid||JSON.stringify(y.toJSON());m.dpi*=o;const r={};if(t!=null&&t.timeExtent){const{start:c,end:u}=t.timeExtent.toJSON();r.time=c&&u&&c===u?""+c:`${c??"null"},${u??"null"}`}else this.timeInfo&&!this.timeInfo.hasLiveData&&(r.time="null,null");return{bbox:e&&e.xmin+","+e.ymin+","+e.xmax+","+e.ymax,bboxSR:h,imageSR:h,size:s+","+l,...m,...d,...r}}async fetchImage(e,s,l,t){const{data:o}=await this._fetchImage("image",e,s,l,t);return o}async fetchImageBitmap(e,s,l,t){const{data:o,url:p}=await this._fetchImage("blob",e,s,l,t);return Y(o,p,t==null?void 0:t.signal)}async fetchRecomputedExtents(e={}){const s={...e,query:{returnUpdates:!0,f:"json",...this.customParameters,token:this.apiKey}},{data:l}=await f(this.url,s),{extent:t,fullExtent:o,timeExtent:p}=l,m=t||o;return{fullExtent:m&&q.fromJSON(m),timeExtent:p&&J.fromJSON({start:p[0],end:p[1]})}}loadAll(){return U(this,e=>{e(this.allSublayers)})}serviceSupportsSpatialReference(e){return k(this,e)}async _fetchImage(e,s,l,t,o){var d,y,h;const p={responseType:e,signal:(o==null?void 0:o.signal)??null,query:{...this.parsedUrl.query,...this.createExportImageParameters(s,l,t,o),f:"image",...this.refreshParameters,...this.customParameters,token:this.apiKey}},m=this.parsedUrl.path+"/export";if(((d=p.query)==null?void 0:d.dynamicLayers)!=null&&!((h=(y=this.capabilities)==null?void 0:y.exportMap)!=null&&h.supportsDynamicLayers))throw new v("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:p.query});try{const{data:r}=await f(m,p);return{data:r,url:m}}catch(r){throw A(r)?r:new v("mapimagelayer:image-fetch-error",`Unable to load image: ${m}`,{error:r})}}async _fetchService(e){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:s,ssl:l}=await f(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},signal:e});l&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=s,this.read(s,{origin:"service",url:this.parsedUrl})}};i([n({type:x})],a.prototype,"dateFieldsTimeReference",void 0),i([n({type:Boolean})],a.prototype,"datesInUnknownTimezone",void 0),i([n()],a.prototype,"dpi",void 0),i([n()],a.prototype,"gdbVersion",void 0),i([n()],a.prototype,"imageFormat",void 0),i([_("imageFormat",["supportedImageFormatTypes"])],a.prototype,"readImageFormat",null),i([n({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],a.prototype,"imageMaxHeight",void 0),i([n({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],a.prototype,"imageMaxWidth",void 0),i([n()],a.prototype,"imageTransparency",void 0),i([n({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],a.prototype,"isReference",void 0),i([n({json:{read:!1,write:!1}})],a.prototype,"labelsVisible",void 0),i([n({type:["ArcGISMapServiceLayer"]})],a.prototype,"operationalLayerType",void 0),i([n({json:{read:!1,write:!1}})],a.prototype,"popupEnabled",void 0),i([n({type:x})],a.prototype,"preferredTimeReference",void 0),i([n()],a.prototype,"sourceJSON",void 0),i([n({json:{write:{ignoreOrigin:!0}}})],a.prototype,"sublayers",void 0),i([V("sublayers",{layers:{type:[K]},visibleLayers:{type:[D]}})],a.prototype,"writeSublayers",null),i([n({type:["show","hide","hide-children"]})],a.prototype,"listMode",void 0),i([n({json:{read:!1},readOnly:!0,value:"map-image"})],a.prototype,"type",void 0),i([n(z)],a.prototype,"url",void 0),a=i([C("esri.layers.MapImageLayer")],a);const ye=a;export{ye as default};
