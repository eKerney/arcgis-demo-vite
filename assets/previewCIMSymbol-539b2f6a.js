import{el as b,gy as R,gs as P}from"./index-a4349970.js";import{n as V,i as w}from"./cimAnalyzer-c668d401.js";import{GeometryStyle as x,CIMSymbolRasterizer as $}from"./CIMSymbolRasterizer-7727bd75.js";import{t as M,l as q}from"./symbolUtils-1bc0b90e.js";import"./TileClipper-ae6eca9e.js";import"./definitions-063fa9ad.js";import"./number-e491b09e.js";import"./BidiEngine-9a40f2f4.js";import"./imageutils-17ed2e18.js";import"./rasterizingUtils-65d5c97b.js";import"./colorUtils-c0f43caf.js";const c=new $(null,!0),u=b(M.size),F=b(M.maxSize),D=b(M.lineWidth),E=1;function k(t){const e=t==null?void 0:t.size;return typeof e=="number"?{width:e,height:e}:{width:e!=null&&typeof e=="object"&&"width"in e?e.width:null,height:e!=null&&typeof e=="object"&&"height"in e?e.height:null}}async function Y(t,e={}){var I;const{node:v,opacity:S,symbolConfig:r}=e,G=r!=null&&typeof r=="object"&&"isSquareFill"in r&&r.isSquareFill,C=e.cimOptions||e,o=C.geometryType||R((I=t==null?void 0:t.data)==null?void 0:I.symbol),i=k(e),{feature:L,fieldMap:z}=C;if(i.width==null||i.height==null){const l=await V.resolveSymbolOverrides(t.data,L,null,z,o);if(!l)return null;(t=t.clone()).data={type:"CIMSymbolReference",symbol:l},t.data.primitiveOverrides=void 0;const m=[];w.fetchResources(l,c.resourceManager,m),w.fetchFonts(l,c.resourceManager,m),m.length>0&&await Promise.all(m);const n=w.getEnvelope(l,null,c.resourceManager),g=n==null?void 0:n.width,d=n==null?void 0:n.height;i.width=o==="esriGeometryPolygon"?u:o==="esriGeometryPolyline"?D:g!=null&&isFinite(g)?Math.min(g,F):u,i.height=o==="esriGeometryPolygon"?u:d!=null&&isFinite(d)?Math.max(Math.min(d,F),E):u}const y=await c.rasterizeCIMSymbolAsync(t,L,i,G||o!=="esriGeometryPolygon"?x.Preview:x.Legend,z,o);if(!y)return null;const{width:j,height:O}=y,s=document.createElement("canvas");s.width=j,s.height=O,s.getContext("2d").putImageData(y,0,0);const f=P(i.width),p=P(i.height),a=new Image(f,p);a.src=s.toDataURL(),a.ariaLabel=e.ariaLabel??null,a.alt=e.ariaLabel??"",S!=null&&(a.style.opacity=`${S}`);let h=a;if(e.effectView!=null){const l={shape:{type:"image",x:0,y:0,width:f,height:p,src:a.src},fill:null,stroke:null,offset:[0,0]};h=q([[l]],[f,p],{effectView:e.effectView,ariaLabel:e.ariaLabel})}return v&&h&&v.appendChild(h),h}export{Y as previewCIMSymbol};
