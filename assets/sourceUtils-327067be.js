import{fh as m,fi as p,fg as g,fj as y,fk as w,fl as d,aA as _}from"./index-71d9419a.js";class I{constructor(){this.code=null,this.description=null}}class b{constructor(n){this.error=new I,this.globalId=null,this.objectId=null,this.success=!1,this.uniqueId=null,this.error.description=n}}function f(e){return new b(e)}class v{constructor(n){this.globalId=null,this.success=!0,this.objectId=this.uniqueId=n}}function E(e){return new v(e)}const a=new Set;function V(e,n,i,h=!1,u){a.clear();for(const s in i){const t=e.get(s);if(!t)continue;const l=i[s],r=q(t,l);if(r!==l&&u&&u.push({name:"invalid-value-type",message:"attribute value was converted to match the field type",details:{field:t,originalValue:l,sanitizedValue:r}}),a.add(t.name),t&&(h||t.editable)){const c=m(t,r);if(c)return f(p(c,t,r));n[t.name]=r}}for(const s of(e==null?void 0:e.requiredFields)??[])if(!a.has(s.name))return f(`missing required field "${s.name}"`);return null}function q(e,n){let i=n;return typeof n=="string"&&g(e)?i=parseFloat(n):n!=null&&y(e)&&typeof n!="string"&&(i=String(n)),w(i)}let o;function A(e,n){if(!e||!d(n))return e;if("rings"in e||"paths"in e){if(o==null)throw new TypeError("geometry engine not loaded");return o.simplify(n,e)}return e}async function P(){return o==null&&(o=await _(()=>import("./geometryEngineJSON-673cb226.js"),["assets/geometryEngineJSON-673cb226.js","assets/geometryEngineBase-0214685a.js","assets/index-71d9419a.js","assets/index-aa0eb131.css","assets/geometryEngineJSON-c60cb21c.js","assets/json-48e3ea08.js"])),o}async function F(e,n){!d(e)||n!=="esriGeometryPolygon"&&n!=="esriGeometryPolyline"||await P()}export{E as c,V as d,A as h,f as u,F as y};
